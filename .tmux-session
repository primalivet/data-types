#!/bin/sh

#  -e exit immediatley if a simple command  exits with non-zero
#  -u treat unset variables as errors in parameter expressions
#  -C prevent output redirection
set -euC

attach() {
    [ -n "${TMUX:-}" ] &&
        tmux switch-client -t  '=data-types' ||
        tmux attach-session -t '=data-types'
}

if tmux has-session -t '=data-types' 2> /dev/null; then
    attach
    exit 0
fi

tmux new-session -d -s data-types
tmux new-window -t '=data-types'

tmux split-window -d -h -t '=data-types:2'
tmux send-keys -t '=data-types:2.right' 'npm run test:watch' Enter


#------------------------------------------------------------------------------
#
#  Create a new session, dont attach (-d) and set session-name (-s)
#
#  % tmux new-session -d -s [session-name]
#
#------------------------------------------------------------------------------
#
#  Create a new window in a targeted (-t) session
#
#  % tmux new-window -t '=[session-name]'
#
#------------------------------------------------------------------------------
#
#  split an existing window verically or (-h horizontally) inside a tageted
#  (-t) session and window ([session-name]:[window-number])
#
#  tmux split-window -d -h -t '=[session-name]:[window-number]'
#
#------------------------------------------------------------------------------
#
#  Rename a window ([session-name]:[window-number]) inside a targeted (-t) session
#
#  tmux rename-window -t '=[session-name]:[window-number]' '[window-name]'
#
#------------------------------------------------------------------------------
#
#  Send keys to a window/pane inside a targeted (-t) session.
#
#  tmux send-keys -t '=[session-name]:[window-number].left' 'npm run start:watch' Enter
#  tmux send-keys -t '=[session-name]:[window-number].right' 'npm run compile:watch' Enter
#
#------------------------------------------------------------------------------
